LOAD CSV WITH HEADERS FROM 'file:///buses.csv' AS bus_row 
WITH bus_row WHERE bus_row.name IS NOT NULL 
MERGE (bus:Bus {name: bus_row.name, longitude: bus_row.longitude, latitude: bus_row.latitude, kv: bus_row.kv});

LOAD CSV WITH HEADERS FROM 'file:///loads.csv' AS load_row 
WITH load_row WHERE load_row.name IS NOT NULL 
MERGE (load:Load {name: load_row.name, kw: load_row.kw, kvar: load_row.kvar, source: load_row.source,
income: load_row.income, race: load_row.race, num_of_vehicle: load_row.num_of_vehicle, total_population: load_row.total_population, vulnerable_population: load_row.vulnerable_population, critical_load_factor: load_row.critical_load_factor, basement_available: load_row.basement_available})
MERGE (load_bus:Bus {name: load_row.source})
MERGE (load)-[:CONSUMES_POWER_FROM]->(load_bus);

LOAD CSV WITH HEADERS FROM 'file:///line_sections.csv' AS line_row 
WITH line_row WHERE line_row.name IS NOT NULL 
MERGE (from_bus:Bus {name: line_row.source})
MERGE (to_bus:Bus {name: line_row.target})
MERGE (from_bus)-[:CONNECTS_TO {name: line_row.name, source: line_row.source, target: line_row.target, length_km: line_row.length_km, ampacity: line_row.ampacity, num_phase: line_row.num_phase}]->(to_bus);

LOAD CSV WITH HEADERS FROM 'file:///transformers.csv' AS xfmr_row
WITH xfmr_row WHERE xfmr_row.name IS NOT NULL 
MERGE (from_bus:Bus {name: xfmr_row.source})
MERGE (to_bus:Bus {name: xfmr_row.target})
MERGE (from_bus)-[:CONNECTS_TO {name: xfmr_row.name, source: xfmr_row.source, target: xfmr_row.target, kva: xfmr_row.kva, num_phase: xfmr_row.num_phase}]->(to_bus);

LOAD CSV WITH HEADERS FROM 'file:///pv_systems.csv' AS pv_row
WITH pv_row WHERE pv_row.name IS NOT NULL 
MERGE (sa:Solar {capacity: pv_row.capacity, name: pv_row.name, anti_islanding: pv_row.anti_islanding, owner: pv_row.owner})
MERGE (ba:Bus {name: pv_row.bus})
MERGE (lo:Load {name: pv_row.owner})
MERGE (sa)-[:INJECTS_ACTIVE_POWER_TO]->(ba)
MERGE (lo)-[:OWNS]->(sa);

LOAD CSV WITH HEADERS FROM 'file:///energy_storage.csv' AS es_row
WITH es_row WHERE es_row.name IS NOT NULL 
MERGE (ea:EnergyStorage {kw: es_row.kw, name: es_row.name, kwh: es_row.kwh, owner:es_row.owner, soc: es_row.soc })
MERGE (ba:Bus {name: es_row.bus})
MERGE (lo:Load {name: es_row.owner})
MERGE (ea)-[:INJECTS_POWER]->(ba)
MERGE (ba)-[:CONSUMES_POWER]->(ea)
MERGE (lo)-[:OWNS]->(ea);

LOAD CSV WITH HEADERS FROM 'file:///substation.csv' AS sub_row
WITH sub_row WHERE sub_row.name IS NOT NULL 
MERGE (b:Bus {name: sub_row.name}) 
SET b:Substation;

MATCH (b:Bus)
SET b.longitude = toFloat(b.longitude)
SET b.latitude = toFloat(b.latitude);

MATCH (b:Bus)-[CONSUMES_POWER]-(c:Load)
SET c.longitude = b.longitude
SET c.latitude = b.latitude;

LOAD CSV WITH HEADERS FROM 'file:///pharmacies.csv' AS p_row
WITH p_row WHERE p_row.name IS NOT NULL 
MERGE (p:Pharmacy {name: p_row.name, open_time: p_row.open_time, 
close_time:p_row.close_time, operational: p_row.operational, 
has_backup: p_row.has_backup, num_employees: p_row.num_employees, 
longitude: toFloat(p_row.longitude), latitude: toFloat(p_row.latitude)})
WITH p
    MATCH (lo:Load)
    MERGE (lo)-[:VISITS_FOR_MEDICINE {distance: point.distance(
       point({longitude: p.longitude, latitude:p.latitude}),
       point({longitude: lo.longitude, latitude:lo.latitude})
    )}]->(p);

LOAD CSV WITH HEADERS FROM 'file:///groceries.csv' AS g_row
WITH g_row WHERE g_row.name IS NOT NULL 
MERGE (g:Grocery {name: g_row.name, open_time: g_row.open_time, 
close_time:g_row.close_time, has_backup: g_row.has_backup, num_employees: g_row.num_employees, 
longitude: toFloat(g_row.longitude), latitude: toFloat(g_row.latitude)})
WITH g
    MATCH (lo:Load)
    MERGE (lo)-[:VISITS_FOR_GROCERIES {distance: point.distance(
       point({longitude: g.longitude, latitude:g.latitude}),
       point({longitude: lo.longitude, latitude:lo.latitude})
    )}]->(g);

LOAD CSV WITH HEADERS FROM 'file:///medical_centers.csv' AS m_row
WITH m_row WHERE m_row.name IS NOT NULL 
MERGE (m:Hospital {name: m_row.name, open_time: m_row.open_time, 
close_time:m_row.close_time, number_of_nurses: m_row.number_of_nurses,
number_of_beds: m_row.number_of_beds, longitude: toFloat(g_row.longitude), latitude: toFloat(g_row.latitude)})
WITH m
    MATCH (lo:Load)
    MERGE (lo)-[:VISITS_DURING_HEALTH_EMERGENCY {distance: point.distance(
       point({longitude: m.longitude, latitude:m.latitude}),
       point({longitude: lo.longitude, latitude:lo.latitude})
    )}]->(m)
    
MATCH (b1:Bus)-[r:CONNECTS_TO]-(b2:Bus)
SET r.longitude = (b1.longitude + b2.longitude)/2
SET r.latitude = (b1.latitude + b2.latitude)/2

MATCH (lo:Load)
SET lo.income = toFloat(lo.income);

MATCH p=(sourceNode:Bus)-[r:CONNECTS_TO]-(targetNode:Bus)
WHERE r.ampacity IS NOT NULL
SET r.ampacity = toFloat(r.ampacity)
SET r.num_phase = toInteger(r.num_phase)
SET sourceNode.kv = toFloat(sourceNode.kv)
WITH r,sourceNode, CASE r.num_phase
WHEN 3 THEN 1.732
ELSE 1
END AS multiplier
SET r.kva = multiplier*r.ampacity*sourceNode.kv;

MATCH p=(sourceNode:Bus)-[r:CONSUMES_POWER_FROM]-(targetNode:Load)
SET targetNode.kw = toFloat(targetNode.kw)
SET targetNode.kvar = toFloat(targetNode.kvar)
SET r.kva = sqrt(targetNode.kw*targetNode.kw+targetNode.kvar*targetNode.kvar);

MATCH p=(sourceNode:Bus)-[r:INJECTS_ACTIVE_POWER_TO]-(targetNode:Solar)
SET targetNode.capacity = toFloat(targetNode.capacity)
SET r.kva = targetNode.capacity;


MATCH p=(sourceNode:Bus)-[r:INJECTS_POWER]-(targetNode:EnergyStorage)
SET targetNode.kw = toFloat(targetNode.kw)
SET r.kva = targetNode.kw;

MATCH (sourceNode:Bus)-[r:CONNECTS_TO]-(targetNode:Bus)
SET r.kva = toFloat(r.kva);



   



