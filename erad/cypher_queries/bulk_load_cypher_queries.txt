LOAD CSV WITH HEADERS FROM 'file:///buses.csv' AS bus_row 
WITH bus_row WHERE bus_row.name IS NOT NULL 
MERGE (bus:Bus {name: bus_row.name, type: bus_row.type, longitude: bus_row.longitude, latitude: bus_row.latitude, kv: bus_row.kv});

LOAD CSV WITH HEADERS FROM 'file:///capacitors.csv' AS cap_row 
WITH cap_row WHERE cap_row.name IS NOT NULL 
MERGE (capacitor:Capacitor {name: cap_row.name, type: cap_row.type, source: cap_row.source, kvar: cap_row.kvar, kv: cap_row.kv})
MERGE (cap_bus:Bus {name: cap_row.source})
MERGE (capacitor)-[:INJECTS_REACTIVE_POWER_TO]->(cap_bus);

LOAD CSV WITH HEADERS FROM 'file:///loads.csv' AS load_row 
WITH load_row WHERE load_row.name IS NOT NULL 
MERGE (load:Load {name: load_row.name, kw: load_row.kw, kvar: load_row.kvar, type: load_row.type, source: load_row.source})
MERGE (load_bus:Bus {name: load_row.source})
MERGE (load)-[:CONSUMES_POWER_FROM]->(load_bus);

LOAD CSV WITH HEADERS FROM 'file:///line_sections.csv' AS line_row 
WITH line_row WHERE line_row.name IS NOT NULL 
MERGE (from_bus:Bus {name: line_row.source})
MERGE (to_bus:Bus {name: line_row.target})
MERGE (from_bus)-[:CONNECTS_TO {name: line_row.name, source: line_row.source, target: line_row.target, length_km: line_row.length_km, ampacity: line_row.ampacity, num_phase: line_row.num_phase}]->(to_bus);


LOAD CSV WITH HEADERS FROM 'file:///medical_centers.csv' AS med_row 
WITH med_row WHERE med_row.Id IS NOT NULL 
MERGE (medical:MedicalCentre {name: med_row.Id, longitude: med_row.LONGITUDE, latitude: med_row.LATITUDE, state: med_row.STATE, zip: med_row.ZIP, city: med_row.CITY, county: med_row.COUNTY});


LOAD CSV WITH HEADERS FROM 'file:///medical_relationships.csv' AS med_rel_row
WITH med_rel_row WHERE med_rel_row.Id IS NOT NULL 
MERGE (medical:MedicalCentre {name: med_rel_row.Id})
MERGE (load:Load {name: med_rel_row.load_name})
MERGE (load)-[:NEARBY_HOSPITAL {distance: med_rel_row.distance}]->(medical);


LOAD CSV WITH HEADERS FROM 'file:///shelters.csv' AS shelter_row
WITH shelter_row WHERE shelter_row.Id IS NOT NULL 
MERGE (shelter:SHELTER {name: shelter_row.Id, longitude: shelter_row.LONGITUDE, latitude: shelter_row.LATITUDE, state: shelter_row.STATE, zip: shelter_row.ZIP, 
	city: shelter_row.CITY, evacuation_capacity: shelter_row.EVACUATION_CAPACITY, post_impact_capacity: shelter_row.POST_IMPACT_CAPACITY });


LOAD CSV WITH HEADERS FROM 'file:///transformers.csv' AS xfmr_row
WITH xfmr_row WHERE xfmr_row.name IS NOT NULL 
MERGE (from_bus:Bus {name: xfmr_row.source})
MERGE (to_bus:Bus {name: xfmr_row.target})
MERGE (from_bus)-[:CONNECTS_TO {name: xfmr_row.name, source: xfmr_row.source, target: xfmr_row.target, kva: xfmr_row.kva, num_phase: xfmr_row.num_phase}]->(to_bus);


LOAD CSV WITH HEADERS FROM 'file:///pv_systems.csv' AS pv_row
WITH pv_row WHERE pv_row.name IS NOT NULL 
MERGE (sa:Solar {capacity: pv_row.capacity, name: pv_row.name, owner: pv_row.owner, anti_islanding: pv_row.anti_islanding})
MERGE (sa)-[:INJECTS_ACTIVE_POWER_TO]->(ba:Bus {name: pv_row.owner})
